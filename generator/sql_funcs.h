#include <vector>
#include <cstdint>

namespace chfuzz {

class CHAggregate{
public:
	bool support_distinct, support_respect_nulls;
	uint32_t fnum, min_args, max_args, min_params, max_params;

	CHAggregate(const uint32_t f, const uint32_t min_p, const uint32_t max_p, const uint32_t min_a, const uint32_t m_args, const bool sd, const bool srn) :
		fnum(f), min_params(min_p), max_params(max_p), min_args(min_a), max_args(m_args), support_distinct(sd), support_respect_nulls(srn) {}
};

class CHFunction{
public:
	uint32_t fnum, min_args, max_args;

	CHFunction(const uint32_t f, const uint32_t min_a, const uint32_t m_args) :
		fnum(f), min_args(min_a), max_args(m_args) {}
};

const constexpr uint32_t ulimited_params = 10000;

const std::vector<CHAggregate> CHAggrs = {
	//standard aggregates
	CHAggregate(sql_query_grammar::SQLFunc::FUNCcount, 0, 0, 0, 1, true, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCmin, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCmax, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCsum, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCavg, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCany, 0, 0, 1, 1, false, true),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCstddevPop, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCstddevPopStable, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCstddevSamp, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCstddevSampStable, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCvarPop, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCvarSamp, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCcorr, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCcorrStable, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCcorrMatrix, 0, 0, 1, ulimited_params, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCcovarPop, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCcovarPopStable, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCcovarPopMatrix, 0, 0, 1, ulimited_params, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCcovarSamp, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCcovarSampStable, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCcovarSampMatrix, 0, 0, 1, ulimited_params, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCentropy, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCexponentialMovingAverage, 1, 1, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCintervalLengthSum, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCmedian, 1, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCmedianDeterministic, 1, 1, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCmedianExact, 1, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCmedianExactWeighted, 1, 1, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCmedianTiming, 1, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCmedianTimingWeighted, 1, 1, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCmedianTDigest, 1, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCmedianTDigestWeighted, 1, 1, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCmedianBFloat16, 0, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCmedianDD, 1, 2, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCrankCorr, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCsumKahan, 0, 0, 1, 1, false, false),
	//clickhouse aggregates
	CHAggregate(sql_query_grammar::SQLFunc::FUNCanalysisOfVariance, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCanyHeavy, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCanyLast, 0, 0, 1, 1, false, true),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCboundingRatio, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCfirst_value, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNClast_value, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCargMin, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCargMax, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCavgWeighted, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCtopK, 1, 2, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCtopKWeighted, 1, 2, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCdeltaSum, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCdeltaSumTimestamp, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCgroupArray, 0, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCgroupArrayLast, 0, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCgroupUniqArray, 0, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCgroupArrayInsertAt, 2, 2, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCgroupArrayMovingAvg, 0, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCgroupArrayMovingSum, 0, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCgroupArraySample, 1, 2, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCgroupArraySorted, 1, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCgroupArrayIntersect, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCgroupBitAnd, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCgroupBitOr, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCgroupBitXor, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCgroupBitmap, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCgroupBitmapAnd, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCgroupBitmapOr, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCgroupBitmapXor, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCsumWithOverflow, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCsumMap, 0, 0, 1, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCsumMapWithOverflow, 0, 0, 1, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCsumMapFiltered, 1, 1, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCsumMapFilteredWithOverflow, 1, 1, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCminMap, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCmaxMap, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCskewSamp, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCskewPop, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCkurtSamp, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCkurtPop, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCuniq, 0, 0, 1, ulimited_params, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCuniqExact, 0, 0, 1, ulimited_params, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCuniqCombined, 1, 1, 1, ulimited_params, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCuniqCombined64, 1, 1, 1, ulimited_params, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCuniqHLL12, 0, 0, 1, ulimited_params, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCuniqTheta, 0, 0, 1, ulimited_params, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCquantile, 1, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCquantiles, 1, ulimited_params, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCquantileExact, 1, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCquantileExactLow, 1, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCquantileExactHigh, 1, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCquantileExactWeighted, 1, 1, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCquantileTiming, 1, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCquantileTimingWeighted, 1, 1, 1, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCquantileDeterministic, 1, 1, 1, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCquantileTDigest, 1, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCquantileTDigestWeighted, 1, 1, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCquantileBFloat16, 0, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCquantileBFloat16Weighted, 0, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCquantileDD, 0, 2, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCsimpleLinearRegression, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCsingleValueOrNull, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCcontingency, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCcramersV, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCcramersVBiasCorrected, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCtheilsU, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCmaxIntersections, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCmaxIntersectionsPosition, 0, 0, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCmeanZTest, 3, 3, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCquantileGK, 2, 2, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCquantileInterpolatedWeighted, 1, 1, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCsparkBar, 1, 3, 2, 2, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCsumCount, 0, 0, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNClargestTriangleThreeBuckets, 1, 1, 2, 2, false, false),
	//parametric aggregates
	CHAggregate(sql_query_grammar::SQLFunc::FUNChistogram, 1, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCsequenceMatch, 1, 1, 1, ulimited_params, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCsequenceCount, 1, 1, 3, ulimited_params, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCwindowFunnel, 2, ulimited_params, 1, ulimited_params, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCretention, 0, 0, 1, ulimited_params, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCuniqUpTo, 1, 1, 1, 1, false, false),
	CHAggregate(sql_query_grammar::SQLFunc::FUNCsequenceNextNode, 2, 2, 4, ulimited_params, false, false)
};

const std::vector<CHFunction> CHFuncs = {
	//arithmetic Functions
	CHFunction(sql_query_grammar::SQLFunc::FUNCplus, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCminus, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiply, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCdivide, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCintDiv, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCintDivOrZero, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCisFinite, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCisInfinite, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCifNotFinite, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCisNaN, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmodulo, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmoduloOrZero, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCpositiveModulo, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCnegate, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCabs, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCgcd, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNClcm, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmax2, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmin2, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiplyDecimal, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCdivideDecimal, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbyteSwap, 1, 1),
	//arrays
	CHFunction(sql_query_grammar::SQLFunc::FUNCempty, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCnotEmpty, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNClength, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCemptyArrayUInt8, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCemptyArrayUInt16, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCemptyArrayUInt32, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCemptyArrayUInt64, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCemptyArrayInt8, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCemptyArrayInt16, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCemptyArrayInt32, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCemptyArrayInt64, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCemptyArrayFloat32, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCemptyArrayFloat64, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCemptyArrayDate, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCemptyArrayDateTime, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCemptyArrayString, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCemptyArrayToSingle, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayWithConstant, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayConcat, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayElement, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNChas, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNChasAll, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNChasAny, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNChasSubstr, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCindexOf, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayDotProduct, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCcountEqual, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayEnumerate, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayEnumerateUniq, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayEnumerateUniqRanked, 3, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayPopBack, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayPopFront, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayPushBack, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayPushFront, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayResize, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarraySlice, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayShingles, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayReverseSort, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayShuffle, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayPartialShuffle, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayUniq, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayJoin, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayDifference, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayDistinct, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayEnumerateDense, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayEnumerateDenseRanked, 3, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayIntersect, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayJaccardIndex, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayReverse, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreverse, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayFlatten, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayCompact, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayZip, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayAUC, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayMin, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayMax, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarraySum, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayAvg, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayProduct, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayRotateLeft, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayRotateRight, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayShiftLeft, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayShiftRight, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayRandomSample, 2, 2),
	//bit functions
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitAnd, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitOr, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitXor, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitNot, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitShiftLeft, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitShiftRight, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitRotateLeft, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitRotateRight, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitSlice, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbyteSlice, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitTest, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitTestAll, 2, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitTestAny, 2, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitCount, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitHammingDistance, 2, 2),
	//bitmap functions
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmapBuild, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmapToArray, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmapSubsetInRange, 3, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmapSubsetLimit, 3, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsubBitmap, 3, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmapContains, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmapHasAny, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmapHasAll, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmapCardinality, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmapMin, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmapMax, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmapTransform, 3, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmapAnd, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmapOr, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmapXor, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmapAndnot, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmapAndCardinality, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmapOrCardinality, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmapXorCardinality, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmapAndnotCardinality, 2, 2),
	//comparison functions
	CHFunction(sql_query_grammar::SQLFunc::FUNCequals, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCnotEquals, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCless, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCgreater, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNClessOrEquals, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCgreaterOrEquals, 2, 2),
	//conditional functions
	CHFunction(sql_query_grammar::SQLFunc::FUNCif, 3, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiIf, 3, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCgreatest, 2, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCleast, 2, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCclamp, 3, 3),
	//time functions
	CHFunction(sql_query_grammar::SQLFunc::FUNCmakeDate, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmakeDate32, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmakeDateTime, 6, 7),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmakeDateTime64, 6, 7),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtimestamp, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtimeZone, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCserverTimeZone, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoTimeZone, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtimeZoneOf, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtimeZoneOffset, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoYear, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoQuarter, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoMonth, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDayOfYear, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDayOfMonth, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDayOfWeek, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoHour, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoMinute, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoSecond, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoMillisecond, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUnixTimestamp, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoStartOfYear, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoStartOfISOYear, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoStartOfQuarter, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoStartOfMonth, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoLastDayOfMonth, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoMonday, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoStartOfWeek, 1, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoLastDayOfWeek, 1, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoStartOfDay, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoStartOfHour, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoStartOfMinute, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoStartOfSecond, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoStartOfMillisecond, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoStartOfMicrosecond, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoStartOfNanosecond, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoStartOfFiveMinutes, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoStartOfTenMinutes, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoStartOfFifteenMinutes, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoStartOfInterval, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoTime, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoRelativeYearNum, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoRelativeQuarterNum, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoRelativeMonthNum, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoRelativeWeekNum, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoRelativeDayNum, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoRelativeHourNum, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoRelativeMinuteNum, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoRelativeSecondNum, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoISOYear, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoISOWeek, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoWeek, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoYearWeek, 1, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDaysSinceYearZero, 1, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCfromDaysSinceYearZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCfromDaysSinceYearZero32, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCage, 3, 4),
	CHFunction(sql_query_grammar::SQLFunc::FUNCdate_diff, 3, 4),
	CHFunction(sql_query_grammar::SQLFunc::FUNCDATE_TRUNC, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCdate_add, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCdate_sub, 2, 4),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtimestamp_add, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtimestamp_sub, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCaddDate, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsubDate, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCnow, 0, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCnow64, 0, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCnowInBlock, 0, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoday, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCyesterday, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtimeSlot, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCchangeYear, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCchangeMonth, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCchangeDay, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCchangeHour, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCchangeMinute, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCchangeSecond, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCaddYears, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCaddQuarters, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCaddMonths, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCaddWeeks, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCaddDays, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCaddHours, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCaddMinutes, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCaddSeconds, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCaddMilliseconds, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCaddMicroseconds, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCaddNanoseconds, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCaddInterval, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCaddTupleOfIntervals, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsubtractYears, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsubtractQuarters, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsubtractMonths, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsubtractWeeks, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsubtractDays, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsubtractHours, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsubtractMinutes, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsubtractSeconds, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsubtractMilliseconds, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsubtractMicroseconds, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsubtractNanoseconds, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsubtractInterval, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsubtractTupleOfIntervals, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtimeSlots, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCformatDateTime, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCformatDateTimeInJodaSyntax, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCdateName, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmonthName, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCfromUnixTimestamp, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCfromUnixTimestampInJodaSyntax, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoModifiedJulianDay, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoModifiedJulianDayOrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCfromModifiedJulianDay, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCfromModifiedJulianDayOrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUTCTimestamp, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCfromUTCTimestamp, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCUTCTimestamp, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtimeDiff, 2, 2),
	//distance
	CHFunction(sql_query_grammar::SQLFunc::FUNCL1Norm, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCL2Norm, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCL2SquaredNorm, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCLinfNorm, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCLpNorm, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCL1Distance, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCL2Distance, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCL2SquaredDistance, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCLinfDistance, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCLpDistance, 3, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCL1Normalize, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCL2Normalize, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCLinfNormalize, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCLpNormalize, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCcosineDistance, 2, 2),
	//encoding
	CHFunction(sql_query_grammar::SQLFunc::FUNCchar, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNChex, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCunhex, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbin, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCunbin, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmaskToList, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitmaskToArray, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbitPositionsToArray, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmortonEncode, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmortonDecode, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNChilbertEncode, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNChilbertDecode, 2, 2),
	//JSON
	CHFunction(sql_query_grammar::SQLFunc::FUNCsimpleJSONHas, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsimpleJSONExtractUInt, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsimpleJSONExtractInt, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsimpleJSONExtractFloat, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsimpleJSONExtractBool, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsimpleJSONExtractRaw, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsimpleJSONExtractString, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCisValidJSON, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONHas, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONLength, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONType, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONExtractUInt, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONExtractInt, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONExtractFloat, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONExtractBool, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONExtractString, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONExtract, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONExtractKeysAndValues, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONExtractKeys, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONExtractRaw, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONExtractArrayRaw, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONExtractKeysAndValuesRaw, 1, 5),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSON_EXISTS, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSON_QUERY, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSON_VALUE, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoJSONString, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONArrayLength, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCjsonMergePatch, 2, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONAllPaths, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONAllPathsWithTypes, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONDynamicPaths, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONDynamicPathsWithTypes, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONSharedDataPaths, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCJSONSharedDataPathsWithTypes, 1, 1),
	//logical
	CHFunction(sql_query_grammar::SQLFunc::FUNCand, 2, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCor, 2, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCnot, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCxor, 2, ulimited_params),
	//map
	CHFunction(sql_query_grammar::SQLFunc::FUNCmap, 2, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmapFromArrays, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCextractKeyValuePairs, 1, 4),
	CHFunction(sql_query_grammar::SQLFunc::FUNCextractKeyValuePairsWithEscaping, 1, 4),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmapAdd, 2, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmapSubtract, 2, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmapPopulateSeries, 1, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmapContains, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmapKeys, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmapValues, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmapContainsKeyLike, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmapExtractKeyLike, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmapApply, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmapFilter, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmapUpdate, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmapConcat, 1, 1),
	//math
	CHFunction(sql_query_grammar::SQLFunc::FUNCe, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCpi, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCexp, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNClog, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCexp2, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCintExp2, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNClog2, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCexp10, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCintExp10, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNClog10, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsqrt, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCcbrt, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCerf, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCerfc, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNClgamma, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtgamma, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsin, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCcos, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtan, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCasin, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCacos, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCatan, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCpow, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCcosh, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCacosh, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsinh, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCasinh, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtanh, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCatanh, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCatan2, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNChypot, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNClog1p, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsign, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsigmoid, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCdegrees, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCradians, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCfactorial, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCwidth_bucket, 4, 4),
	CHFunction(sql_query_grammar::SQLFunc::FUNCproportionsZTest, 6, 6),
	//nlp
	CHFunction(sql_query_grammar::SQLFunc::FUNCdetectCharset, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCdetectLanguage, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCdetectLanguageMixed, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCdetectProgrammingLanguage, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCdetectLanguageUnknown, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCdetectTonality, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNClemmatize, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCstem, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsynonyms, 2, 2),
	//nullable
	CHFunction(sql_query_grammar::SQLFunc::FUNCisNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCisNullable, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCisNotNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCisNotDistinctFrom, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCisZeroOrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCcoalesce, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCifNull, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCnullIf, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCassumeNotNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoNullable, 1, 1),
	//rand
	CHFunction(sql_query_grammar::SQLFunc::FUNCrand, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrand64, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrandCanonical, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrandConstant, 0, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrandUniform, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrandNormal, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrandLogNormal, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrandBinomial, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrandNegativeBinomial, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrandPoisson, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrandBernoulli, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrandExponential, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrandChiSquared, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrandStudentT, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrandFisherF, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrandomString, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrandomFixedString, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrandomPrintableASCII, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrandomStringUTF8, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCfuzzBits, 2, 2),
	//string replace
	CHFunction(sql_query_grammar::SQLFunc::FUNCoverlay, 3, 4),
	CHFunction(sql_query_grammar::SQLFunc::FUNCoverlayUTF8, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreplaceOne, 3, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreplaceAll, 3, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreplaceRegexpOne, 3, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreplaceRegexpAll, 3, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCregexpQuoteMeta, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCformat, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtranslate, 3, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtranslateUTF8, 3, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCprintf, 1, ulimited_params),
	//rounding
	CHFunction(sql_query_grammar::SQLFunc::FUNCfloor, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCceiling, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtruncate, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCround, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCroundBankers, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCroundToExp2, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCroundDuration, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCroundAge, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCroundDown, 2, 2),
	//string search
	CHFunction(sql_query_grammar::SQLFunc::FUNCposition, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNClocate, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCpositionCaseInsensitive, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCpositionUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCpositionCaseInsensitiveUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiSearchAllPositions, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiSearchAllPositionsCaseInsensitive, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiSearchAllPositionsUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiSearchAllPositionsCaseInsensitiveUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiSearchFirstPosition, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiSearchFirstPositionCaseInsensitive, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiSearchFirstPositionUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiSearchFirstPositionCaseInsensitiveUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiSearchFirstIndex, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiSearchFirstIndexCaseInsensitive, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiSearchFirstIndexUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiSearchFirstIndexCaseInsensitiveUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiSearchAny, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiSearchAnyCaseInsensitive, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiSearchAnyUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiSearchAnyCaseInsensitiveUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmatch, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiMatchAny, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiMatchAnyIndex, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiMatchAllIndices, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiFuzzyMatchAny, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiFuzzyMatchAnyIndex, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCmultiFuzzyMatchAllIndices, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCextract, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCextractAll, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCextractAllGroupsHorizontal, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCextractAllGroupsVertical, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNClike, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCnotLike, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCilike, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCnotILike, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCngramDistance, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCngramDistanceCaseInsensitive, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCngramDistanceUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCngramDistanceCaseInsensitiveUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCngramSearch, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCngramSearchCaseInsensitive, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCngramSearchUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCngramSearchCaseInsensitiveUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCcountSubstrings, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCcountSubstringsCaseInsensitive, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCcountSubstringsCaseInsensitiveUTF8, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCcountMatches, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCcountMatchesCaseInsensitive, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCregexpExtract, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNChasSubsequence, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNChasSubsequenceCaseInsensitive, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNChasSubsequenceUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNChasSubsequenceCaseInsensitiveUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNChasToken, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNChasTokenOrNull, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNChasTokenCaseInsensitive, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNChasTokenCaseInsensitiveOrNull, 2, 2),
	//split strings
	CHFunction(sql_query_grammar::SQLFunc::FUNCsplitByChar, 2, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsplitByString, 2, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsplitByRegexp, 2, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsplitByWhitespace, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsplitByNonAlpha, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCarrayStringConcat, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCalphaTokens, 1, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCextractAllGroups, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCngrams, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtokens, 2, 2),
	//strings
	CHFunction(sql_query_grammar::SQLFunc::FUNCempty, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCnotEmpty, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNClength, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNClengthUTF8, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCleft, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCleftUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCleftPad, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCleftPadUTF8, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCright, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrightUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrightPad, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCrightPadUTF8, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNClower, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCupper, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNClowerUTF8, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCupperUTF8, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCisValidUTF8, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoValidUTF8, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCspace, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreverse, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreverseUTF8, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCconcat, 2, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCconcatAssumeInjective, 2, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCconcatWithSeparator, 3, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCconcatWithSeparatorAssumeInjective, 3, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsubstring, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsubstringUTF8, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsubstringIndex, 3, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsubstringIndexUTF8, 3, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCappendTrailingCharIfAbsent, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCconvertCharset, 3, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbase58Encode, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbase58Decode, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtryBase58Decode, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbase64Encode, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbase64URLEncode, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbase64Decode, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbase64URLDecode, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtryBase64Decode, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtryBase64URLDecode, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCendsWith, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCendsWithUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCstartsWith, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCstartsWithUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtrimLeft, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtrimRight, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtrimBoth, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCCRC32, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCCRC32IEEE, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCCRC64, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCnormalizeQuery, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCnormalizeQueryKeepNames, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCnormalizedQueryHash, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCnormalizedQueryHashKeepNames, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCnormalizeUTF8NFC, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCnormalizeUTF8NFD, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCnormalizeUTF8NFKC, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCnormalizeUTF8NFKD, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCencodeXMLComponent, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCdecodeXMLComponent, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCdecodeHTMLComponent, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCextractTextFromHTML, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCascii, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsoundex, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCpunycodeEncode, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCpunycodeDecode, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtryPunycodeDecode, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCidnaEncode, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtryIdnaEncode, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCidnaDecode, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCbyteHammingDistance, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCstringJaccardIndex, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCstringJaccardIndexUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCeditDistance, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCeditDistanceUTF8, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCdamerauLevenshteinDistance, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCjaroSimilarity, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCjaroWinklerSimilarity, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCinitcap, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCinitcapUTF8, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCfirstLine, 1, 1),
	//timeseries
	CHFunction(sql_query_grammar::SQLFunc::FUNCseriesOutliersDetectTukey, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCseriesPeriodDetectFFT, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCseriesDecomposeSTL, 2, 2),
	//time window
	CHFunction(sql_query_grammar::SQLFunc::FUNCtumble, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtumbleStart, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtumbleEnd, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNChop, 3, 4),
	CHFunction(sql_query_grammar::SQLFunc::FUNChopStart, 3, 4),
	CHFunction(sql_query_grammar::SQLFunc::FUNChopEnd, 3, 4),
	//tuples
	CHFunction(sql_query_grammar::SQLFunc::FUNCtuple, 2, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtupleElement, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCuntuple, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtupleHammingDistance, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtupleToNameValuePairs, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtupleNames, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtuplePlus, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtupleMinus, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtupleMultiply, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtupleDivide, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtupleNegate, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtupleMultiplyByNumber, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtupleDivideByNumber, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtupleConcat, 2, ulimited_params),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtupleIntDiv, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtupleIntDivOrZero, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtupleIntDivByNumber, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtupleIntDivOrZeroByNumber, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtupleModulo, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtupleModuloByNumber, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCflattenTuple, 1, 1),
	//type conversion
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt8, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt8OrZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt8OrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt8OrDefault, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt16, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt16OrZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt16OrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt16OrDefault, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt32, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt32OrZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt32OrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt32OrDefault, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt64, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt64OrZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt64OrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt64OrDefault, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt128, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt128OrZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt128OrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt128OrDefault, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt256, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt256OrZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt256OrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoInt256OrDefault, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt8, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt8OrZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt8OrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt8OrDefault, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt16, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt16OrZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt16OrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt16OrDefault, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt32, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt32OrZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt32OrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt32OrDefault, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt64, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt64OrZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt64OrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt64OrDefault, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt128, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt128OrZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt128OrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt128OrDefault, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt256, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt256OrZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt256OrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUInt256OrDefault, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoFloat32, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoFloat32OrZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoFloat32OrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoFloat32OrDefault, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoFloat64, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoFloat64OrZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoFloat64OrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoFloat64OrDefault, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDate, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDateOrZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDateOrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDateOrDefault, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDateTime, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDateTimeOrZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDateTimeOrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDateTimeOrDefault, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDate32, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDate32OrZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDate32OrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDate32OrDefault, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDateTime64, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDateTime64OrZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDateTime64OrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDateTime64OrDefault, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDecimal32, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDecimal32OrZero, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDecimal32OrNull, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDecimal32OrDefault, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDecimal64, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDecimal64OrZero, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDecimal64OrNull, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDecimal64OrDefault, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDecimal128, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDecimal128OrZero, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDecimal128OrNull, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDecimal128OrDefault, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDecimal256, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDecimal256OrZero, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDecimal256OrNull, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDecimal256OrDefault, 2, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoString, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoFixedString, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoStringCutToZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoDecimalString, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreinterpretAsUInt8, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreinterpretAsUInt16, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreinterpretAsUInt32, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreinterpretAsUInt64, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreinterpretAsUInt128, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreinterpretAsUInt256, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreinterpretAsInt8, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreinterpretAsInt16, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreinterpretAsInt32, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreinterpretAsInt64, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreinterpretAsInt128, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreinterpretAsInt256, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreinterpretAsFloat32, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreinterpretAsFloat64, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreinterpretAsDate, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreinterpretAsDateTime, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreinterpretAsString, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreinterpretAsFixedString, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCreinterpretAsUUID, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoIntervalYear, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoIntervalQuarter, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoIntervalMonth, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoIntervalWeek, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoIntervalDay, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoIntervalHour, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoIntervalMinute, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoIntervalSecond, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoIntervalMillisecond, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoIntervalMicrosecond, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoIntervalNanosecond, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTime, 1, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTimeOrZero, 1, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTimeOrNull, 1, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTimeInJodaSyntax, 1, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTimeInJodaSyntaxOrZero, 1, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTimeInJodaSyntaxOrNull, 1, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTimeBestEffort, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTime32BestEffort, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTimeBestEffortUS, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTimeBestEffortOrNull, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTime32BestEffortOrNull, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTimeBestEffortOrZero, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTime32BestEffortOrZero, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTimeBestEffortUSOrNull, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTimeBestEffortUSOrZero, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTime64BestEffort, 1, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTime64BestEffortUS, 1, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTime64BestEffortOrNull, 1, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTime64BestEffortOrZero, 1, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTime64BestEffortUSOrNull, 1, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCparseDateTime64BestEffortUSOrZero, 1, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoLowCardinality, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUnixTimestamp64Milli, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUnixTimestamp64Micro, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUnixTimestamp64Nano, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCfromUnixTimestamp64Milli, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCfromUnixTimestamp64Micro, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCfromUnixTimestamp64Nano, 1, 2),
	//ULID
	CHFunction(sql_query_grammar::SQLFunc::FUNCgenerateULID, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCULIDStringToDateTime, 1, 2),
	//UUID
	CHFunction(sql_query_grammar::SQLFunc::FUNCgenerateUUIDv4, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCgenerateUUIDv7, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUUID, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUUIDOrDefault, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUUIDOrNull, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCtoUUIDOrZero, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCUUIDStringToNum, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCUUIDNumToString, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCUUIDToNum, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCUUIDv7ToDateTime, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCserverUUID, 0, 0),
	CHFunction(sql_query_grammar::SQLFunc::FUNCgenerateSnowflakeID, 0, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsnowflakeToDateTime, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsnowflakeToDateTime64, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCdateTimeToSnowflake, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCdateTime64ToSnowflake, 1, 1),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsnowflakeIDToDateTime, 1, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCsnowflakeIDToDateTime64, 1, 3),
	CHFunction(sql_query_grammar::SQLFunc::FUNCdateTimeToSnowflakeID, 1, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCdateTime64ToSnowflakeID, 1, 2),
	//UniqTheta
	CHFunction(sql_query_grammar::SQLFunc::FUNCuniqThetaUnion, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCuniqThetaIntersect, 2, 2),
	CHFunction(sql_query_grammar::SQLFunc::FUNCuniqThetaNot, 2, 2)
};

}
